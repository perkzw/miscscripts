-- Service references
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Create module table
local AimbotModule = {}

-- Private variables (using closure for better encapsulation)
local connections = {}
local isAimbotActive = false
local lockedPlayer = nil
local maxDistance = 500
local powerUpKey = Enum.KeyCode.E

-- Cache references that should persist
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Rest of the helper functions remain the same...
local function isPlayerCritical(player)
    -- Previous implementation
end

local function isTargetVisible(target)
    -- Previous implementation
end

local function getClosestPlayer()
    -- Previous implementation
end

local function aimbot()
    -- Previous implementation
end

-- Improved toggle function
function AimbotModule.Toggle()
    isAimbotActive = not isAimbotActive
    if not isAimbotActive then
        lockedPlayer = nil
    end
end

-- Improved initialization function
function AimbotModule.Initialize()
    -- Clean up any existing connections first
    AimbotModule.Unload()
    
    -- Input detection connection
    table.insert(connections, UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == powerUpKey then
            AimbotModule.Toggle()
        end
    end))

    -- RenderStepped connection for aiming
    table.insert(connections, RunService.RenderStepped:Connect(function()
        if isAimbotActive then
            aimbot()
        end
    end))
end

-- Improved unload function
function AimbotModule.Unload()
    -- Disable the aimbot
    isAimbotActive = false
    lockedPlayer = nil
    
    -- Disconnect all connections
    for _, connection in ipairs(connections) do
        if typeof(connection) == "RBXScriptConnection" and connection.Connected then
            connection:Disconnect()
        end
    end
    
    -- Clear the connections table
    table.clear(connections)
    
    -- Reset camera only if needed
    if Camera and Camera.Parent then
        local currentPos = Camera.CFrame.Position
        local lookVector = Camera.CFrame.LookVector
        Camera.CFrame = CFrame.new(currentPos, currentPos + lookVector)
    end
end

-- Additional helper functions
function AimbotModule.SetActive(state)
    isAimbotActive = state
    if not state then
        lockedPlayer = nil
    end
end

function AimbotModule.IsActive()
    return isAimbotActive
end

-- Initialize the module
AimbotModule.Initialize()

return AimbotModule
