local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Power-up key (E)
local powerUpKey = Enum.KeyCode.E

-- Aimbot state (on/off)
local isAimbotActive = false

-- Maximum distance for the aimbot to track players
local maxDistance = 500

-- Currently locked player
local lockedPlayer = nil

-- Event connections
local connections = {}

-- Function to check if a player is downed or critical
local function isPlayerCritical(player)
    if not player or not player.Character then return true end
    
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if not humanoid then return true end
    
    -- Check if health is 1 or less
    if humanoid.Health <= 1 then
        return true
    end
    
    -- Additional check for downed state (you might need to adjust this based on your game)
    local isDown = player.Character:GetAttribute("Downed") -- Adjust this based on how your game indicates downed state
    if isDown then
        return true
    end
    
    return false
end

-- Function to check if a target is visible (only used for initial targeting)
local function isTargetVisible(target)
    if not target or not target.Character or not target.Character:FindFirstChild("Head") then
        return false
    end

    -- Get the position of the local player's camera and the target's head
    local cameraPos = Camera.CFrame.Position
    local targetPos = target.Character.Head.Position

    -- Raycast to check for obstacles
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character} -- Ignore the local player's character
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(cameraPos, (targetPos - cameraPos).Unit * maxDistance, raycastParams)

    -- If the raycast hits something, check if it's the target
    if raycastResult then
        local hit = raycastResult.Instance
        return hit and hit:IsDescendantOf(target.Character)
    end

    return false
end

-- Function to find the closest player to the mouse
local function getClosestPlayer()
    local closestPlayer = nil
    local closestDistance = maxDistance
    local mouseLocation = UserInputService:GetMouseLocation()

    -- Loop through all players (excluding the local player)
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and 
           player.Character and 
           player.Character:FindFirstChild("HumanoidRootPart") and
           not isPlayerCritical(player) then
            
            local targetPos = player.Character.HumanoidRootPart.Position
            local screenPos, onScreen = Camera:WorldToScreenPoint(targetPos)
            
            if onScreen then
                local distance = (mouseLocation - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                
                -- Only check visibility for initial targeting
                if distance < closestDistance and isTargetVisible(player) then
                    closestPlayer = player
                    closestDistance = distance
                end
            end
        end
    end

    return closestPlayer
end

-- Function to lock camera and aim at the closest player
local function aimbot()
    if lockedPlayer then
        -- Only check if player is critical, ignore wall visibility
        if isPlayerCritical(lockedPlayer) then
            lockedPlayer = nil
            return
        end
        
        -- Continue aiming at locked player regardless of walls
        if lockedPlayer.Character and lockedPlayer.Character:FindFirstChild("Head") then
            local targetPos = lockedPlayer.Character.Head.Position
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPos)
        else
            -- If character or head is missing, release lock
            lockedPlayer = nil
        end
    else
        -- If no player is locked, find the closest visible player to mouse
        local targetPlayer = getClosestPlayer()
        if targetPlayer then
            lockedPlayer = targetPlayer
            local targetPos = targetPlayer.Character.Head.Position
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPos)
        end
    end
end

-- Function to toggle the aimbot on or off when E is pressed
local function toggleAimbot()
    isAimbotActive = not isAimbotActive
    if not isAimbotActive then
        lockedPlayer = nil
    end
end

-- Function to unload the aimbot
local function unload()
    -- Disconnect all event connections
    for _, connection in pairs(connections) do
        connection:Disconnect()
    end

    -- Reset variables
    isAimbotActive = false
    lockedPlayer = nil

    -- Optionally, reset the camera or perform other cleanup
    print("Aimbot unloaded.")
end

-- Detect when the player presses E to toggle aimbot
connections.toggleAimbot = UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == powerUpKey then
        toggleAimbot()
    end
end)

-- Update the camera position when aimbot is active
connections.renderStepped = RunService.RenderStepped:Connect(function()
    if isAimbotActive then
        aimbot()
    end
end)

-- Example of how to call the unload function
-- You can call this manually or when the script is being destroyed
-- unload()
